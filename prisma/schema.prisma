// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  OrgUsers      OrgUsers[]
  Notification  Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Environment {
  id            String                  @id @default(cuid())
  slug          String                  @unique
  status        String
  currentBranch String?
  currentHash   String?
  currentUrl    String?
  repo          Repo                    @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId        String
  deployments   EnvironmentDeployment[]
}

model EnvironmentDeployment {
  id            String      @id @default(cuid())
  status        String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  githash       String
  branch        String
  url           String?
}

model Repo {
  id             String          @id @default(cuid())
  name           String
  owner          String
  authToken      String
  workflowName   String
  workflowId     Int
  workflowPath   String
  Org            Org             @relation(fields: [orgId], references: [id])
  orgId          String
  Environment    Environment[]
  workflowInputs WorkflowInput[]
}

model WorkflowInput {
  id           String   @id @default(cuid())
  name         String
  type         String
  description  String
  required     Boolean
  defaultValue String?
  options      String[]
  repo         Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repoId       String
}

model Org {
  id            String          @id @default(cuid())
  name          String
  repos         Repo[]
  OrgUsers      OrgUsers[]
  OrgUserInvite OrgUserInvite[]
}

enum EnumRole {
  ADMIN
  MEMBER
}

model OrgUsers {
  id   String   @id @default(cuid())
  org  Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role EnumRole @default(MEMBER)

  orgId  String
  userId String

  @@unique([orgId, userId])
}

model OrgUserInvite {
  id           String         @id @default(cuid())
  org          Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  email        String
  role         EnumRole       @default(MEMBER)
  orgId        String
  accepted     Boolean?

  @@unique([orgId, email])
}

model Notification {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  read            Boolean        @default(false)
  type            String
  data            Json
}
